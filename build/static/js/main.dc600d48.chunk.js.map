{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/eventsReducer.js","redux/reducers/currentEventReducer.js","redux/reducers/vehicleReducer.js","redux/reducers/organizerDataReducer.js","redux/reducers/eventAttendeesReducer.js","redux/reducers/userEventsReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/eventsSaga.js","redux/sagas/registerForEventSaga.js","redux/sagas/vehicleSaga.js","redux/sagas/postNewVehicleSaga.js","redux/sagas/updateNewVehicleSaga.js","redux/sagas/organizerDataSaga.js","redux/sagas/fetchRegisteredSaga.js","redux/sagas/userProfileSaga.js","redux/sagas/index.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/OnlyAdminWarning/OnlyAdminWarning.js","components/AdminProtectedRoute/AdminProtectedRoute.js","components/UpcomingEventsList/UpcomingEventsList.js","components/UpcomingEvents/UpcomingEvents.js","components/Tracks/Tracks.js","components/ImageUpload/ImageUpload.js","components/CreateEvent/CreateEvent.js","components/EditCreatedEvent/EditCreatedEvent.js","components/EventDetails/EventDetails.js","components/UserEvents/UserEvents.js","components/Profile/Profile.js","components/MyEventsAttendingTable/MyEventsAttendingTable.js","components/MyEventsListItem/MyEventsListItem.js","components/MyEvents/MyEvents.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","action","type","registrationMessage","loginMode","userReducer","payload","eventsReducer","currentEventReducer","vehicleReducer","organizerDataReducer","attendingEvent","userEventsReducer","rootReducer","errors","user","events","currentEvent","userEvents","loginUser","logoutUser","loginSaga","put","config","headers","withCredentials","axios","post","console","log","response","status","takeLatest","registerUser","registrationSaga","fetchUser","userSaga","get","data","fetchEvents","postEvent","editEvent","deleteEvent","eventsSaga","eventId","delete","id","registerEvent","toggleRegistrationStatus","registerForEventSaga","fetchVehicle","vehicleSaga","postVehicle","postNewVehicleSaga","updateVehicle","updateNewVehicleSaga","fetchMyCreatedEvents","organizerDataSaga","fetchRegistered","fetchRegisteredSaga","fetchMyEvents","userProfileSaga","rootSaga","all","LoginPage","username","password","login","event","preventDefault","props","dispatch","handleInputChangeFor","propertyName","setState","target","value","this","className","role","onSubmit","htmlFor","name","onChange","Button","variant","color","onClick","Component","connect","RegisterPage","email","ComponentToShow","ComponentToProtect","component","otherProps","OnlyAdminWarning","is_admin","UpcomingEventsList","toDetails","handleDetailsButtonClick","to","event_name","image_url","src","alt","height","moment","event_date_start","format","event_date_end","upcoming_description","reduxState","UpcomingEvents","Box","m","map","key","Tracks","href","ImageUpload","handleChange","ev","success","url","handleUpload","file","upload","files","fileParts","split","fileName","fileType","then","returnData","signedRequest","handleAddImageUrl","options","result","catch","error","alert","JSON","stringify","errorMessage","style","padding","backgroundColor","ref","CreateEvent","uploadImage","newEvent","eventTitle","eventStartDate","eventEndDate","upcomingDescription","detailsDescription","organizerContact","imageUrl","handleAddImage","handleSubmit","TextField","label","InputLabelProps","shrink","window","confirm","EditCreatedEvent","details_description","admin_contact","EventDetails","toggleEditEvent","toUpcomingEvents","registerForEvent","handleEditEventButtonClick","handleDeleteEventButtonClick","created_id","Grid","item","ButtonGroup","size","aria-label","registration","event_id","registration_complete","UserEvents","useStyles","makeStyles","root","width","overflowX","table","minWidth","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","scope","Profile","addVehicle","editVehicle","newVehicle","make","model","year","handleEditButtonClick","handleAddButtonClick","placeholder","MyEventsAttendingTable","user_id","MyEventsListItem","toggleAttendees","handleEventAttendeesButtonClick","MyEvents","Nav","newValue","TabPanel","children","index","other","Typography","hidden","aria-labelledby","p","a11yProps","theme","flexGrow","palette","background","paper","AppBar","position","Tabs","Tab","Link","LogOutButton","createMuiTheme","primary","deepOrange","secondary","blue","red","contrastThreshold","tonalOffset","App","exact","from","path","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.dc600d48.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","// stores all data from event table in database\nconst eventsReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_EVENTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default eventsReducer;","// stores the current event\n// usually fired from client side not sagas\nconst currentEventReducer = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_CURRENT_EVENT':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default currentEventReducer;","// Stores user's vehicle\nconst vehicleReducer = (state = {}, action) => {\n    switch (action.type) {\n        case 'SET_USER_VEHICLE':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default vehicleReducer;","// stores events created by the specific user\nconst organizerDataReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ORGANIZER_EVENTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default organizerDataReducer;","// stores all users and user vehicles that are attending a specific user created event\nconst attendingEvent = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_EVENT_ATTENDEES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default attendingEvent;","// stores the events that the specific user is registered for\nconst userEventsReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_USER_EVENTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default userEventsReducer;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport events from './eventsReducer';\nimport currentEvent from './currentEventReducer';\nimport vehicleReducer from './vehicleReducer';\nimport organizerDataReducer from './organizerDataReducer';\nimport attendingEvent from './eventAttendeesReducer';\nimport userEvents from './userEventsReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// use combineReducers redux higher order component to make rootReducer, rootReducer will be imported into /src root index.js\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  events,\n  currentEvent,\n vehicleReducer,\n organizerDataReducer,\n attendingEvent,\n userEvents,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('/api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('/api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('/api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on 'FETCH_EVENTS' actions\nfunction* fetchEvents() {\n    try {\n        const response = yield axios.get('/api/events');\n        yield put({ type: 'SET_EVENTS', payload: response.data });\n    } catch (error) {\n        console.log('error in eventsSaga, fetchEvents request failed with error:', error);\n    }\n}\n\n// worker Saga: will be fired on 'CREATE_EVENT' actions\nfunction* postEvent(action) {\n    try {\n        yield axios.post('/api/events/create', action.payload );\n        yield put({ type: 'FETCH_EVENTS', })\n    } catch (error) {\n        console.log('error in eventsSaga, postEvent request failed with:', error);\n    }\n}\n\n// worker Saga: will be fired on 'EDIT_EVENT' actions\nfunction* editEvent(action) {\n    try{\n        const response = yield axios.put(`/api/events/edit/${action.payload.eventId}`, action.payload);\n        yield put({ type: 'SET_CURRENT_EVENT', payload: response.data[0] });\n    } catch (error) {\n        console.log('error in editEvent put request in eventsSaga.js with:', error);\n    }\n}\n\n// worker Saga: will be fired on 'DELETE_EVENT' actions\nfunction* deleteEvent(action) {\n    try{\n        yield axios.delete(`/api/events/delete/${action.payload.id}`);\n        yield put({ type: 'FETCH_EVENTS' });\n    } catch (error) {\n        console.log('error in deleteEvent deletEvent in eventsSaga.js with:', error);\n    }\n}\n\nfunction* eventsSaga() {\n    yield takeLatest('FETCH_EVENTS', fetchEvents);\n    yield takeLatest('CREATE_EVENT', postEvent);\n    yield takeLatest('EDIT_EVENT', editEvent);\n    yield takeLatest('DELETE_EVENT', deleteEvent);\n}\n\nexport default eventsSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on 'UPDATE_NEW_VEHICLE' actions\nfunction* registerEvent(action) {\n    try {\n        yield axios.post('/api/events/register', action.payload);\n        yield put({ type: 'FETCH_USER_EVENTS' });\n    } catch (error) {\n        console.log('error in registerForEventSaga, registerEvent request failed with error:', error);\n    }\n} // End worker Saga\n\n// worker Saga: will be fired on 'UPDATE_NEW_VEHICLE' actions\nfunction* toggleRegistrationStatus(action) {\n    try {\n        const response = yield axios.put('/api/organizer/complete-registration', action.payload);\n        yield put({ type: 'FETCH_REGISTERED', payload: response.data[0] });\n    } catch (error) {\n        console.log('request failed completeRegistration function in registerForEventSaga.js with:', error);\n    }\n} // End worker Saga\n\nfunction* registerForEventSaga() {\n    yield takeLatest('EVENT_REGISTER', registerEvent);\n    yield takeLatest('TOGGLE_REGISTRATION_STATUS', toggleRegistrationStatus);\n}\n\nexport default registerForEventSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on 'FETCH_VEHICLE' actions\nfunction* fetchVehicle() {\n    try {\n        const response = yield axios.get('/api/vehicle'); // axios HTTP request to server\n        // conditional that makes call to vehicleReducer to store users vehicle from database\n        if(response.data[0]){\n        yield put({ type: 'SET_USER_VEHICLE', payload: response.data[0] });\n        } else {\n            console.log('response from GET route in vehicleSaga was undefined');\n        };\n    } catch (error) {\n        console.log('error in vehicleSaga, fetchVehicle request failed with error:', error);\n    };\n} // End fetchVehicle saga\n\nfunction* vehicleSaga() {\n    yield takeLatest('FETCH_VEHICLE', fetchVehicle); // runs fetchVehicle function on action with type 'FETCH_VEHICLE'\n}\n\nexport default vehicleSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on 'POST_NEW_VEHICLE' actions\nfunction* postVehicle(action) {\n    try {\n        const response = yield axios.post('/api/vehicle/add', action.payload);\n        yield put({ type: 'SET_USER_VEHICLE', payload: response.data });\n    } catch (error) {\n        console.log('error in postNewVehicleSaga, postVehicle request failed with error:', error);\n    }\n}\n\n\n\nfunction* postNewVehicleSaga() {\n    yield takeLatest('POST_NEW_VEHICLE', postVehicle);\n}\n\nexport default postNewVehicleSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on 'UPDATE_NEW_VEHICLE' actions\nfunction* updateVehicle(action) {\n    try {\n        const response = yield axios.put('/api/vehicle/edit', action.payload);\n        yield put({ type: 'SET_USER_VEHICLE', payload: response.data[0] });\n    } catch (error) {\n        console.log('error in postNewVehicleSaga, postVehicle request failed with error:', error);\n    }\n}\n\nfunction* updateNewVehicleSaga() {\n    yield takeLatest('UPDATE_NEW_VEHICLE', updateVehicle);\n}\n\nexport default updateNewVehicleSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on 'FETCH_MY_CREATED_EVENTS' actions\nfunction* fetchMyCreatedEvents() {\n    try {\n        const response = yield axios.get('/api/organizer');\n        yield put({ type: 'SET_ORGANIZER_EVENTS', payload: response.data });\n    } catch (error) {\n        console.log('error in organizerDataSaga, fetchMyCreatedEvents request failed with error:', error);\n    }\n}\n\n\nfunction* organizerDataSaga() {\n    yield takeLatest('FETCH_MY_CREATED_EVENTS', fetchMyCreatedEvents);\n}\n\nexport default organizerDataSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on 'FETCH_REGISTERED' actions\nfunction* fetchRegistered(action) {\n    try {\n        const response = yield axios.get(`/api/organizer/attending/${action.payload}`);\n        yield put({ type: 'SET_EVENT_ATTENDEES', payload: response.data });\n    } catch (error) {\n        console.log('error in organizerDataSaga, GET request for fetchRegistered failed with:', error);\n    }\n}\n\nfunction* fetchRegisteredSaga() {\n    yield takeLatest('FETCH_REGISTERED', fetchRegistered);\n}\n\nexport default fetchRegisteredSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on 'FETCH_USER_EVENTS' actions\nfunction* fetchMyEvents() {\n    try {\n        const response = yield axios.get(`/api/events/my-registered`);\n        yield put({ type: 'SET_USER_EVENTS', payload: response.data });\n    } catch (error) {\n        console.log('error in userProfileSaga, fetchMyEvents request failed with error:', error);\n    }\n}\n\n\n\nfunction* userProfileSaga() {\n    yield takeLatest('FETCH_USER_EVENTS', fetchMyEvents);\n}\n\nexport default userProfileSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport eventsSaga from './eventsSaga';\nimport registerForEventSaga from './registerForEventSaga';\nimport vehicleSaga from './vehicleSaga';\nimport postNewVehicleSaga from './postNewVehicleSaga';\nimport updateNewVehicleSaga from './updateNewVehicleSaga';\nimport organizerDataSaga from './organizerDataSaga';\nimport fetchRegisteredSaga from './fetchRegisteredSaga';\nimport userProfileSaga from './userProfileSaga';\n\n// combines all sagas into a single rootSaga, rootSaga imports into /src root index.js\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    eventsSaga(),\n    registerForEventSaga(),\n    vehicleSaga(),\n    postNewVehicleSaga(),\n    updateNewVehicleSaga(),\n    organizerDataSaga(),\n    fetchRegisteredSaga(),\n    userProfileSaga(),\n  ]);\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\n// This component will be rendered if the user is not logged in\n// Allows a user to Log In to the app or Register an account for the app\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  // Function that takes the username and password inputed by user and makes dispatch call to loginSaga.js for authentication\n  // Called on Log In button click\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login function\n\n  // Function that is called onChange of input fields\n  // Captures user inputed username and password and stores data temporarily in local state\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {/* Conditionally renders errors reducer loginMessage, if no errors occur during log in this.props.errors.loginMessage will be falsy */}\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <Button\n              className=\"log-in\"\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Log In\n            </Button>\n          </div>\n        </form>\n        <center>\n          {/* button to toggle which component renders, LoginPage or RegisterPage by changing reduxState.loginMode reducer */}\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => { this.props.dispatch({ type: 'SET_TO_REGISTER_MODE' }) }}\n          >\n            Register\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Provides access of errors reducer in reduxState to component\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button'; // Material UI styled buttons\n\n// This component is rendered if the user is not logged in and loginMode reducer = \"register\"\n// Allows a user to create an account to access the application\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n    email: '',\n  };\n\n  // Function that dispatches to registrationSaga.js to create new row in user table in database if no input fields are null\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password && this.state.email) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n          email: this.state.email,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'REGISTRATION_INPUT_ERROR' });\n    }\n  } // end registerUser function\n\n  // Function that is called onChange of input field to capture user inputs and store them in local state\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  } // End handleInputChangeFor function\n\n  render() {\n    return (\n      <div>\n        {/* conditionally renders error message if errors.registrationMessage reducer is not null */}\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"email\">\n              Email:\n              <input\n                type=\"text\"\n                name=\"email\"\n                value={this.state.email}\n                onChange={this.handleInputChangeFor('email')}\n              />\n            </label>\n          </div>\n          <div>\n            <Button\n              className=\"register\"\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Register\n            </Button>\n          </div>\n        </form>\n        <center>\n          {/* renders LoginPage on Login button click */}\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => { this.props.dispatch({ type: 'SET_TO_LOGIN_MODE' }) }}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n} // End RegisterPage component\n\n// Provides access of errors reducer to component through props\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// This component is a custom wrapper for client routing that watches reduxState and redirects user to login page if they are not logged in\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n} // End ProtectedRoute component\n\n// Provides access to user, and loginMode reducers to component through props\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n","import React, { Component } from 'react';\n\n// This component is a very basic, unstyled custom message that is rendered if a non admin user knows the url of an admin only view\n// The navigation bar will only conditionally render if the user is an admin, so this component should not be used too frequently\n// Rendered from AdminProtectedRoute\nclass OnlyAdminWarning extends Component {\n\n  render() {\n    return (\n     <div>\n         <h1>Access Restricted</h1>\n         <p>This page may only be viewed if you have administrative rights. If you are an organizer you should have administrative rights to \n             create, delete, and edit track events as well as see all attendees and volunteers for any events you create. If you\n             believe you do have administrative rights try logging out and then back in, your session may have timed out. Otherwise\n             contact your car club Speed Freaks administrator to grant you administrative access.\n         </p>\n     </div>\n    );\n  }\n} // End OnlyAdminWarning component\n\nexport default OnlyAdminWarning;","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport OnlyAdminWarning from '../OnlyAdminWarning/OnlyAdminWarning'; // Component with custom user not authorized message\n\n// \nconst AdminProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.is_admin) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = OnlyAdminWarning;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  }\n}\n\nexport default connect(mapStateToProps)(AdminProtectedRoute)","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom'; // used for client side routing\nimport moment from 'moment'; // imports moment.js to format dates correctly\nimport Button from '@material-ui/core/Button'; // Material UI styled buttons\n\n// This component renders for each object in events reducer, its parent component is UpcomingEvents\n// Displays data for each event along with a picture if the organizer chose to add one when creating event\nclass UpcomingEventsList extends Component {\n\n    state = {\n        toDetails: false,  // used for client side routing\n    }\n\n    // Function that is called on More Info button click\n    // Dispatches to currentEventReducer with payload of the specific event object, dispatches to userProfileSaga.js to fetch users registered events\n    // and sets this.state.toDetails to true which redirects the user to /event-details\n    handleDetailsButtonClick = () => {\n        this.props.dispatch({ type: 'SET_CURRENT_EVENT', payload: this.props.event });\n        this.props.dispatch({ type: 'FETCH_USER_EVENTS', });\n\n        this.setState({\n            toDetails: true,\n        });\n    } // End handleDetailsButtonClick function\n\n    render() {\n\n        if (this.state.toDetails === true) {\n            return <Redirect to='/event-details' />\n        }\n\n        return (\n            <>\n                <h2>{this.props.event.event_name}</h2>\n                {/* renders the image for the event if there is one */}\n                {this.props.event.image_url &&\n                <img src={this.props.event.image_url} alt=\"Event\" height=\"300px\" />\n    }\n                <p>{moment(this.props.event.event_date_start).format('MM/DD/YYYY')}   -   {moment(this.props.event.event_date_end).format('MM/DD/YYYY')}</p>\n                <p>{this.props.event.upcoming_description}</p>\n                <Button onClick={this.handleDetailsButtonClick} variant=\"contained\" color=\"primary\">\n                    More Info\n                </Button>\n            </>\n        );\n    }\n} // End UpcomingEventsList component\n\n// Provides component access to reduxState through props\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps)(UpcomingEventsList);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UpcomingEventsList from '../UpcomingEventsList/UpcomingEventsList'; // imports child component to be rendered in this component\nimport Box from '@material-ui/core/Box'; // Material UI component used for spacing\n\n// This component will render if user navigates to /upcoming-events and are logged in\n// Displays a list of all track events currently on application\nclass UpcomingEvents extends Component {\n\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_EVENTS' }); // makes dispatch call to eventsSaga.js to fetch all events from database\n  }\n\n  render() {\n    return (\n      <Box m={5}>\n      <div className=\"upcoming-events\">\n        <div className=\"upcoming-events-header\">\n          <h1>Upcoming Events:</h1>\n        </div>\n        <div className=\"upcoming-events-map-list\">\n          {/* conditionally maps through events reducer and sends each object to UpcomingEventsList component as a prop if events table has at least one event */}\n          {this.props.reduxState.events[0] ?\n          this.props.reduxState.events.map((event) => {\n            return (\n              <UpcomingEventsList key={event.id} event={event} />\n            );\n          }) :\n          <h2>There are currently no upcoming track events. Please come back to see new events soon!</h2>\n        }\n        </div>\n      </div>\n      </Box>\n    );\n  }\n} // End UpcomingEvents component\n\n// Provides component with access to reduxState through props\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\nexport default connect(mapStateToProps)(UpcomingEvents);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Box from '@material-ui/core/Box'; // Material UI component used for spacing\n\n// This component will be rendered when a user navigates to / or /tracks if they are logged in, landing page for the application\n// Tracks is a static component that introduces users to Brainerd International Raceway and the application usage if they are not already familiar\nclass Tracks extends Component {\n  render() {\n    return (\n      <Box m={5}>\n      <div>\n        <div>\n          <h1>Brainerd International Raceway</h1>\n          <img src=\"https://www.brainerdraceway.com/wp-content/uploads/2018/03/09RoadCourseMap.jpg\" alt=\"BIR\" height=\"500px\" />\n        </div>\n        <div>\n          <h3>What is BIR?</h3>\n          <p>\n            Brainerd International Raceway is a road coarse, and dragstrip racing complex northwest of the city of Brainerd, Minnesota.\n            The complex has a 0.25-mile dragstrip, and overlapping 2.5-mile and 3.1-mile road courses. The complex also includes a cart track.\n          </p>\n        </div>\n        <div>\n          <h3>Events at BIR</h3>\n          <p>\n            Brainerd International Raceway is popular with proffessional drivers and amateur drivers alike. It's history started with drag racing in 1968 which is still what it's best known for today.\n            Now, with the Donnybroke Road coarse and Competition Road coarse racing enthusiasts of any skill level are welcome to safely test the limits of their vehicles.\n            There are many car clubs that host events at BIR spanning the entire season (Spring-Fall), where anyone can take their daily driver and feed their need for speed.\n            BIR also hosts proffessional SCCA and NHRA drag racing events that anyone is welcome to attend with a capacity of 20,000 fans. \n          </p>\n        </div>\n        <div>\n          More info can be found on the Brainerd International Raceway official site here: <a href=\"https://www.brainerdraceway.com/\">Visit BIR</a>\n          </div>\n        <div>\n          <h3>How do I get Involved?</h3>\n          <p>\n            Finish setting up your profile with a vehicle you plan on driving if you haven't already. Then click on the Upcoming events tab where\n            car clubs from around the Minneapolis metro area post social events, high performance driving schools, and more! Register for the event and \n            make sure to check the email linked to your account frequently for instructions from the organizer on how to complete your registration.\n            Any further questions about specific events can be directed to the organizer, organizer contact information can be found in the Event Details page\n            for each specific event.\n          </p>\n        </div>\n        <div>\n          <h3>President or Member of a Car Club?</h3>\n          <p>\n            Email the site administrator at chris@ferbers.us with details on your position within the car club to get administrative rights and start creating\n            events for others to see and join!\n          </p>\n        </div>\n      </div>\n      </Box>\n    )\n  }\n} // End Tracks component\n\n// Provides access to user reducer in component through props\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\n// this allows the use of <App /> in index.js\nexport default connect(mapStateToProps)(Tracks);\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n// This component is rendered in CreateEvent component\n// Allows a user to upload an image file on their local computer to be displayed with a created event by using the AWS S3 api\nclass ImageUpload extends Component {\n\nconstructor(props){\n    super(props);\n    this.state = {\n      success : false,\n      url : \"\",\n      error: false,\n      errorMessage : \"\"\n    }\n  }\n\n  // Function that sets local state to success: false, url: \"\" to reset image upload process, called onChange of input for file\n  handleChange = (ev) => {\n    this.setState({success: false, url : \"\"});\n  } // End handleChange function\n\n  // Function called on UPLOAD button click\n  // Makes axios.post request to sign_s3.js controller which returns a signedRequest needed for authorization to store file in S3 Bucket \n  // Then makes axios.put request with signedRequest to give that aws provided url the user inputed file\n  handleUpload = (ev) => {\n    let file = this.upload.files[0];\n    // Split the filename to get the name and type\n\n    let fileParts = this.upload.files[0].name.split('.');\n    let fileName = fileParts[0];\n    let fileType = fileParts[1];\n    axios.post('/sign_s3',{\n      fileName : fileName,\n      fileType : fileType\n    })\n    .then(response => {\n      const returnData = response.data.data.returnData;\n      const signedRequest = returnData.signedRequest;\n      const url = returnData.url;\n      this.props.handleAddImageUrl(url); // uses handleAddImageUrl function to give CreateEvent component's local state the url\n\n      // defines paramaters needed by AWS api\n      const options = {\n        headers: {\n          'Content-Type': fileType\n        }\n      };\n\n      axios.put(signedRequest,file,options)\n      .then(result => {\n        this.setState({success: true});\n      })\n      .catch(error => {\n        alert(\"ERROR \", JSON.stringify(error));\n      })\n    })\n    .catch(error => {\n      alert(JSON.stringify(error));\n    })\n  } // End handleUpload function\n\n  render() {\n    {/* Creates custom messages to render to notify user on successful or unsuccessful image upload */}\n    const SuccessMessage = () => (\n      <div style={{padding:50}}>\n        <h3 style={{color: 'green'}}>SUCCESSFUL UPLOAD</h3>\n        <br/>\n      </div>\n    )\n    const ErrorMessage = () => (\n      <div style={{padding:50}}>\n        <h3 style={{color: 'red'}}>FAILED UPLOAD</h3>\n        <span style={{color: 'red', backgroundColor: 'black'}}>ERROR: </span>\n        <span>{this.state.errorMessage}</span>\n        <br/>\n      </div>\n    )\n    return (\n      <>\n      <div className=\"imageUpload\">\n        <center>\n          <h1>UPLOAD A FILE</h1>\n          {this.state.success ? <SuccessMessage/> : null}\n          {this.state.error ? <ErrorMessage/> : null}\n          <input onChange={this.handleChange} ref={(ref) => { this.upload = ref; }} type=\"file\"/>\n          <br/>\n          <button onClick={this.handleUpload}>UPLOAD</button>\n        </center>\n      </div>\n      <div>\n        \n      </div>\n      </>\n    );\n  }\n}\n\nexport default (ImageUpload);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ImageUpload from '../ImageUpload/ImageUpload';\n// imports Material UI components needed for styled buttons and input fields\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\n// import { makeStyles } from '@material-ui/core/styles';\n\n// This component will provide a form to create a new track event, only accessible if user is an admin\nclass CreateEvent extends Component {\n\n  state = {\n    uploadImage: false,\n    newEvent: {\n      eventTitle: '',\n      eventStartDate: '',\n      eventEndDate: '',\n      upcomingDescription: '',\n      detailsDescription: '',\n      organizerContact: '',\n      imageUrl: '',\n    }\n  }\n\n  // Will render CreateEvent form or ImageUpload component by setting this.state.uploadImage to opposite value on Add Event Image button click\n  handleAddImage = (event) => {\n    this.setState({\n      ...this.state.newEvent,\n      uploadImage: !this.state.uploadImage,\n    });\n  } // End handleAddImage function\n\n  // Function to capture URL for uploaded image returned by AWS S3 api to be used where image will be displayed\n  // Will be accessed in ImageUpload component and will update this local state by sending it as a prop\n  handleAddImageUrl = (url) => {\n    this.setState({\n      ...this.state,\n      newEvent: {\n        ...this.state.newEvent,\n        imageUrl: url,\n      }\n    });\n  } // End handleAddImageUrl function\n\n  // Function called on Create Event button click to send user inputed values captured in local state to eventsSaga.js\n  // Will clear local state and input fields after dispatch to eventsSaga.js\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.dispatch({ type: 'CREATE_EVENT', payload: this.state.newEvent });\n    this.setState({\n      eventTitle: '',\n      eventStartDate: '',\n      eventEndDate: '',\n      upcomingDescription: '',\n      detailsDescription: '',\n      organizerContact: '',\n    });\n  } // End handleSubmit function\n\n  // Function that captures user inputs for all input fields in create event form onChange\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      newEvent: {\n        ...this.state.newEvent,\n        [propertyName]: event.target.value,\n      }\n    });\n  } // End handleInputChangeFor function\n\n  // Function for fine tuning <TextField> Material UI components, not currently in use\n  // useStyles = makeStyles(theme => ({\n  //   root: {\n  //     '& .MuiTextField-root': {\n  //       margin: theme.spacing(1),\n  //       width: 200,\n  //     },\n  //   },\n  // }));\n\n  render() {\n    if (this.state.uploadImage) {\n      return (\n        <Box m={5}>\n          <div>\n            <ImageUpload handleAddImageUrl={this.handleAddImageUrl} />\n            <button onClick={this.handleAddImage}>Finish Creating Event</button>\n          </div>\n        </Box>\n      )\n    }\n    return (\n      <Box m={5}>\n        <h1>Create an Event:</h1>\n        <div className=\"createEventForm\">\n          <TextField\n            id=\"eventTitle\"\n            label=\"Event Title\"\n            type=\"text\"\n            variant=\"outlined\"\n            value={this.state.eventTitle}\n            onChange={this.handleInputChangeFor('eventTitle')}\n          />\n          <TextField\n            id=\"upcomingDescription\"\n            label=\"Upcoming Events Page Description\"\n            type=\"text\"\n            variant=\"outlined\"\n            value={this.state.upcomingDescription}\n            onChange={this.handleInputChangeFor('upcomingDescription')}\n          />\n          <TextField\n            id=\"detailsDescription\"\n            label=\"Event Details Page Description\"\n            type=\"text\"\n            variant=\"outlined\"\n            value={this.state.detailsDescription}\n            onChange={this.handleInputChangeFor('detailsDescription')}\n          />\n          <div>\n            <TextField\n              id=\"organizerContact\"\n              label=\"Organizer Contact Info\"\n              type=\"text\"\n              variant=\"outlined\"\n              value={this.state.organizerContact}\n              onChange={this.handleInputChangeFor('organizerContact')}\n            />\n            <TextField\n              id=\"eventStartDate\"\n              label=\"Event Start Date\"\n              type=\"date\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              value={this.state.eventStartDate}\n              onChange={this.handleInputChangeFor('eventStartDate')}\n            />\n            <TextField\n              id=\"eventEndDate\"\n              label=\"Event End Date\"\n              type=\"date\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              value={this.state.eventEndDate}\n              onChange={this.handleInputChangeFor('eventEndDate')}\n            />\n          </div>\n          <div className='imageUploadButton' onClick={() => { if (window.confirm('Would you like to add a photo to be displayed with the event?')) this.handleAddImage() }} >\n            <Button variant=\"contained\" color=\"primary\" onClick={this.handleAddImage}>\n              Add Event Image\n            </Button>\n            <Button onClick={this.handleSubmit} variant=\"contained\" color=\"primary\">\n              Create Event\n            </Button>\n          </div>\n        </div>\n      </Box >\n    );\n  }\n} // End CreateEvent component\n\n// Gives component to access to reduxState through props\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\nexport default connect(mapStateToProps)(CreateEvent);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// Component that is rendered in EventDetails component to edit an event, only accessible to creator of event\nclass EditCreatedEvent extends Component {\n\n    // Local state will start with current values for event and show them in input fields of form\n    state = {\n        eventId: this.props.reduxState.currentEvent.id,\n        eventTitle: this.props.reduxState.currentEvent.event_name,\n        eventStartDate: this.props.reduxState.currentEvent.event_date_start,\n        eventEndDate: this.props.reduxState.currentEvent.event_date_end,\n        upcomingDescription: this.props.reduxState.currentEvent.upcoming_description,\n        detailsDescription: this.props.reduxState.currentEvent.details_description,\n        organizerContact: this.props.reduxState.currentEvent.admin_contact,\n    }\n\n    // Function called on Submit button click that will send updated event values to eventsSaga.js\n    // Clears input fields of form\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.dispatch({ type: 'EDIT_EVENT', payload: this.state });\n        this.setState({\n            eventTitle: '',\n            eventStartDate: '',\n            eventEndDate: '',\n            upcomingDescription: '',\n            detailsDescription: '',\n            organizerContact: '',\n        });\n    } // End handleSubmit function\n\n    // Function called onChange of an input field in form to capture user inputs and store them in local state\n    handleInputChangeFor = propertyName => (event) => {\n        this.setState({\n            [propertyName]: event.target.value,\n        });\n    } // End handleInputChangeFor function\n\n    render() {\n        return (\n            <>\n                <h2>Edit Event</h2>\n                <div className=\"createEventForm\">\n                    <form onSubmit={this.handleSubmit}>\n                        <div>\n                            <label htmlFor=\"eventTitle\">\n                                Event Title:\n              <input\n                                    type=\"text\"\n                                    name=\"eventTitle\"\n                                    value={this.state.eventTitle}\n                                    onChange={this.handleInputChangeFor('eventTitle')}\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label htmlFor=\"upcomingDescription\">\n                                Upcoming Events Description:\n              <input\n                                    type=\"text\"\n                                    name=\"upcomingDescription\"\n                                    value={this.state.upcomingDescription}\n                                    onChange={this.handleInputChangeFor('upcomingDescription')}\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label htmlFor=\"detailsDescription\">\n                                Event Details Description:\n              <input\n                                    type=\"text\"\n                                    name=\"detailsDescription\"\n                                    value={this.state.detailsDescription}\n                                    onChange={this.handleInputChangeFor('detailsDescription')}\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label htmlFor=\"organizerContact\">\n                                Organizer Contact Info:\n              <input\n                                    type=\"text\"\n                                    name=\"organizerContact\"\n                                    value={this.state.organizerContact}\n                                    onChange={this.handleInputChangeFor('organizerContact')}\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label htmlFor=\"eventStartDate\">\n                                Event Start Date:\n              <input\n                                    type=\"date\"\n                                    name=\"eventStartDate\"\n                                    value={this.state.eventStartDate}\n                                    onChange={this.handleInputChangeFor('eventStartDate')}\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label htmlFor=\"eventEndDate\">\n                                Event End Date:\n              <input\n                                    type=\"date\"\n                                    name=\"eventEndDate\"\n                                    value={this.state.eventEndDate}\n                                    onChange={this.handleInputChangeFor('eventEndDate')}\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <input\n                                className=\"create-event\"\n                                type=\"submit\"\n                                name=\"submit\"\n                                value=\"Save Changes\"\n                            />\n                        </div>\n                    </form>\n                </div>\n            </>\n        );\n    }\n} // End EditCreatedEvent component\n\n// Provides component access to reduxState through props\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps)(EditCreatedEvent);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport moment from 'moment'; // imports moment.js into component to properly format dates\n\n// imports Material UI components to be used for styling in this component\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Box from '@material-ui/core/Box';\n\nimport EditCreatedEvent from '../EditCreatedEvent/EditCreatedEvent'; // child component to be rendered within this component\n\n// This component will display information on the current event from reduxState.currentEvent\n// Base component for /event-details route\nclass EventDetails extends Component {\n\n  // local state used in conditional rendering of EditCreatedEvent component as well as in Redirecting back to /upcoming-events\n  state = {\n    toggleEditEvent: false,\n    toUpcomingEvents: false,\n  }\n  \n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_VEHICLE' }); // Makes GET request in vehicleSaga.js to fetch user vehicle on component did mount\n  }\n\n  // Function that dispatches to registerForEventSaga.js to register a user for specific event on Register button click\n  // Alerts user and does not allow registration to an event if they do not have an active vehicle on their profile\n  registerForEvent = () => {\n    if (this.props.reduxState.vehicleReducer.id) {\n      this.props.dispatch({ type: 'EVENT_REGISTER', payload: this.props.reduxState.currentEvent });\n    } else {\n      alert('To register for an event your profile must have an active vehicle set. You can add a vehicle to your profile in the Profile page.');\n    }\n  } // End registerForEvent function\n\n  // Function that toggles rendering of EditCreatedEvent component through conditional rendering\n  // Called on Edit Event or Collapse Edit View button clicks\n  handleEditEventButtonClick = () => {\n    this.setState({\n      toggleEditEvent: !this.state.toggleEditEvent\n    });\n  } // End handleEditEventButtonClick function\n\n  // Function that is called on Delete Event button click, only accessible if user is the creator of the event\n  // Makes dispatch call to eventsSaga.js to delete an event from the database\n  handleDeleteEventButtonClick = () => {\n    this.props.dispatch({ type: 'DELETE_EVENT', payload: this.props.reduxState.currentEvent });\n    this.setState({\n      toUpcomingEvents: true,\n    });\n  } // End handleDeleteEventButtonClick function\n\n  render() {\n    // Conditional to Redirect user to /upcoming-events if current event is deleted or if currentEvent reducer is null\n    if (this.state.toUpcomingEvents === true) {\n      return <Redirect to='/upcoming-events' />\n    } else if (!this.props.reduxState.currentEvent.event_name) {\n      return <Redirect to='/upcoming-events' />\n    }\n    return (\n      <Box m={5}> {/* Provides margin from component content to edges of screen */}\n        <div className=\"EventDetails\">\n          <h2>\n            {this.props.reduxState.currentEvent.event_name}\n          </h2>\n          {/* renders event image if current event has non null image_url property */}\n          {this.props.reduxState.currentEvent.image_url &&\n            <img src={this.props.reduxState.currentEvent.image_url} alt=\"Event\" height=\"300px\" />\n          }\n          <p>{moment(this.props.reduxState.currentEvent.event_date_start).format('MM/DD/YYYY')}   -   {moment(this.props.reduxState.currentEvent.event_date_end).format('MM/DD/YYYY')}</p>\n          <p>{this.props.reduxState.currentEvent.details_description}</p>\n          <p>{this.props.reduxState.currentEvent.admin_contact}</p>\n        </div>\n        {/* Condittionally render Delete Event and Edit Event buttons/features if user is the creator of the event */}\n        {this.props.reduxState.user.id === this.props.reduxState.currentEvent.created_id ?\n          <Grid item>\n            <ButtonGroup color=\"primary\" size=\"small\" aria-label=\"small outlined button group\">\n              <Button onClick={this.registerForEvent}>Register</Button>\n              <Button onClick={this.handleEditEventButtonClick}>{this.state.toggleEditEvent ? 'Collapse Edit View' : 'Edit Event'}</Button>\n              <Button onClick={() => { if (window.confirm('Are you sure you wish to delete this event? This cannot be undone.')) this.handleDeleteEventButtonClick() }}>\n                Delete Event\n              </Button>\n            </ButtonGroup>\n          </Grid> :\n          <Button onClick={this.registerForEvent} variant=\"contained\" color=\"primary\">Register</Button>\n        }\n        {this.state.toggleEditEvent &&\n          <div className=\"renderEditCreatedEvent\">\n            <EditCreatedEvent />\n          </div>\n        }\n        <div className=\"registrationStatusMessage\">\n          {/* maps through userEvents reducer and conditionally renders a users registration status for event accordingly */}\n          {this.props.reduxState.userEvents.map((registration) => {\n            if (registration.event_id === this.props.reduxState.currentEvent.id) {\n              return (\n                <div key={registration.event_id}>\n                  <h3>You are signed up for this event!</h3>\n                  {registration.registration_complete ?\n                    <div>\n                      <h4>Registration Status: Complete</h4>\n                      <p>You are all set to race! Make sure you are checking your email for further event information from the organizer.</p>\n                    </div> :\n                    <div>\n                      <h4>Registration Status: Pending</h4>\n                      <p>The event organizer has not yet checked you off as fully registered. Please check your email frequently as the organizer will be contacting you with info to complete your registration for this event.</p>\n                    </div>\n                  }\n                </div>\n              );\n            } else {\n              return (\n                <p key={registration.event_id}></p>\n              );\n            }\n          })\n          }\n        </div>\n      </Box>\n    );\n  }\n}\n\n// Provides component access to reduxState through props\nconst mapStateToProps = reduxState => ({\n  reduxState,\n});\n\nexport default connect(mapStateToProps)(EventDetails);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment'; // imports moment.js to format dates on the DOM correctly\n// imports Material UI components needed for styled tables\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n// This component is rendered from the Profile component\nclass UserEvents extends Component {\n\n    // Function that uses Material UI method makeStyles to setup table format\n    useStyles = () => {\n        makeStyles({\n            root: {\n                width: '100%',\n                overflowX: 'auto',\n            },\n            table: {\n                minWidth: 650,\n            },\n        });\n    } // End useStyles function\n\n    render() {\n        return (\n            <div>\n                <h3>My Events:</h3>\n                <Paper className={this.useStyles.root}>\n                    <Table className={this.useStyles.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Event</TableCell>\n                                <TableCell align=\"right\">Event Date</TableCell>\n                                <TableCell align=\"right\">Registration Status</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {/* map through userEvents reducer to render data for each event user is registered for */}\n                            {this.props.reduxState.userEvents.map(event => (\n                                <TableRow key={event.event_id}>\n                                    <TableCell component=\"th\" scope=\"event\">\n                                        {event.event_name}\n                                    </TableCell>\n                                    <TableCell align=\"right\">\n                                        <p>{moment(event.event_date_start).format('MM/DD/YYYY')}   -   {moment(event.event_date_end).format('MM/DD/YYYY')}</p>\n                                    </TableCell>\n                                    {event.registration_complete ?\n                                        <TableCell align=\"right\">Complete</TableCell> :\n                                        <TableCell align=\"right\">Pending</TableCell>\n                                    }\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            </div>\n\n        );\n    }\n} // End UserEvents component\n\n// Provides component acces to reduxState through props\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps)(UserEvents);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UserEvents from '../UserEvents/UserEvents'; // imports UserEvents component to be rendered in Profile page\nimport Button from '@material-ui/core/Button'; // Material UI styled buttons\nimport Box from '@material-ui/core/Box'; // Material UI wrapper component for margins and padding\n\n// This component will be rendered when a user navigates to /profile\n// Displays the users active vehicle, events that the user is registered for and feature for user to add or delete a vehicle\nclass Profile extends Component {\n\n    state = {\n        addVehicle: false,\n        editVehicle: false,\n        newVehicle: {\n            make: '',\n            model: '',\n            year: '',\n        },\n    }\n\n    // React life cycle function that dispatches to vehicleSaga.js and userProfileSaga.js to fetch user data on component did mount\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_VEHICLE' });\n        this.props.dispatch({ type: 'FETCH_USER_EVENTS' });\n    } // End componentDidMount function\n\n    // Function that sets this.state.editVehicle to opposite current value to conditionally render edit vehicle input fields\n    handleEditButtonClick = () => {\n        this.setState({\n            editVehicle: !this.state.editVehicle,\n        });\n    } // End handleEditButtonClick function\n\n    // Function that sets this.state.addVehicle to opposite current value to conditionally render add vehicle input fields\n    handleAddButtonClick = () => {\n        this.setState({\n            addVehicle: !this.state.addVehicle,\n        });\n    } // End handleAddButtonClick function\n\n    // Function called on Save Vehicle button click that dispatches to postNewVehicleSaga.js to make HTTP POST request to server\n    // and calls handleAddButtonClick function to collapse input fields\n    postVehicle = () => {\n        this.props.dispatch({ type: 'POST_NEW_VEHICLE', payload: this.state.newVehicle, });\n        this.handleAddButtonClick();\n    } // End postVehicle function\n\n    // Function called on Save Vehicle button click that dispatches to updateNewVehicleSaga.js to make HTTP PUT request to server\n    // and calls handleEditButtonClick function to collapse input fields\n    updateVehicle = () => {\n        this.props.dispatch({ type: 'UPDATE_NEW_VEHICLE', payload: this.state.newVehicle, });\n        this.handleEditButtonClick();\n    } // End updateVehicle function\n\n    // Function called onChange of an input field, captures user inputs and stores them in local state to be dispatched to server later\n    handleInputChangeFor = propertyName => (event) => {\n        this.setState({\n            ...this.state,\n            newVehicle: {\n                ...this.state.newVehicle,\n                [propertyName]: event.target.value,\n            }\n        });\n    } // End handleInputChangeFor function\n\n    render() {\n        return (\n            <Box m={5}>\n                <h1>Profile:</h1>\n                <div className=\"profile\">\n                    <p>Username: {this.props.reduxState.user.username}</p>\n                    <p>Email: {this.props.reduxState.user.email}</p>\n                </div>\n                <div className=\"vehicle\">\n                    {/* conditionally renders users vehicle info if vehicleReducer.id is truthy or no current vehicle message if falsy */}\n                    {this.props.reduxState.vehicleReducer.id ?\n                        <div>\n                            <h3>Active Vehicle:</h3>\n                            <p>{this.props.reduxState.vehicleReducer.year} {this.props.reduxState.vehicleReducer.make} {this.props.reduxState.vehicleReducer.model}</p>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.handleEditButtonClick}>Edit Vehicle</Button>\n                        </div>\n                        :\n                        <div>\n                            <h3>Active Vehicle:</h3>\n                            <p>You currently have no active vehicle set. Please add a vehicle to finish setting up your profile. Note, this can be changed at any time.</p>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.handleAddButtonClick}>Add Vehicle</Button>\n                        </div>\n                    }\n                </div>\n                <div className=\"changeVehicle\">\n                    {/* conditionally renders input fields to add a vehicle on Add Vehicle button click */}\n                    {this.state.addVehicle &&\n                        <div>\n                            <h3>Vehicle to be used at events:</h3>\n                            <p>Make:</p><input onChange={this.handleInputChangeFor('make')} placeholder=\"eg. 'BMW', 'Audi', 'Porsche'\" value={this.state.newVehicle.make}></input>\n                            <p>Model:</p><input onChange={this.handleInputChangeFor('model')} placeholder=\"eg. 'M2', 'R8', 'Cayman GT4'\" value={this.state.newVehicle.model}></input>\n                            <p>Year:</p><input onChange={this.handleInputChangeFor('year')} placeholder=\"eg. '1999'\" value={this.state.newVehicle.year}></input>\n                            <div>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.postVehicle}>Save Vehicle</Button>\n                            </div>\n                        </div>\n                    }\n                    {/* conditionally renders input fields to edit vehicle on Edit Vehicle button click */}\n                    {this.state.editVehicle &&\n                        <div>\n                            <h3>Vehicle to be used at events:</h3>\n                            <p>Make:</p><input onChange={this.handleInputChangeFor('make')} placeholder={this.props.reduxState.vehicleReducer.make} value={this.state.newVehicle.make}></input>\n                            <p>Model:</p><input onChange={this.handleInputChangeFor('model')} placeholder={this.props.reduxState.vehicleReducer.model} value={this.state.newVehicle.model}></input>\n                            <p>Year:</p><input onChange={this.handleInputChangeFor('year')} placeholder={this.props.reduxState.vehicleReducer.year} value={this.state.newVehicle.year}></input>\n                            <div>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.updateVehicle}>Save Vehicle</Button>\n                            </div>\n                        </div>\n                    }\n                </div>\n                {/* conditionally renders UserEvents component if user is registered for at least one event, else renders no events message */}\n                {this.props.reduxState.userEvents[0] ?\n                <UserEvents />\n                :\n                <div>\n                <h3>My Events</h3>\n                <p>You are not currently registered for any upcoming events.</p>\n                </div>\n    }\n                 \n                 </Box>\n        );\n    }\n} // End Profile component\n\n// Provides reduxState to component through props\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps)(Profile);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button'; // imports Material UI custom buttons\n\n// imports Material UI components needed to create custom tables\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n// This component displays all event attendees for an admin's event with feature to toggle registration status for each event attendee\n// Conditionally renders in MyEventsListItem component on Event Attendees button click\nclass MyEventsAttendingTable extends Component {\n\n    // Material UI setup from documentation that will be used by other Material UI components to correctly format tables\n    useStyles = () => {\n        makeStyles({\n            root: {\n                width: '100%',\n                overflowX: 'auto',\n            },\n            table: {\n                minWidth: 650,\n            },\n        });\n    } // End useStyles function\n\n    // Function that makes dispatch call to registerForEventSaga.js to toggle registration status of a user in database\n    toggleRegistrationStatus = (user) => {\n        this.props.dispatch({ type: 'TOGGLE_REGISTRATION_STATUS', payload: user });\n    } // End toggleRegistrationStatus function\n\n    render() {\n        return (\n            <Paper className={this.useStyles.root}>\n                <Table className={this.useStyles.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Username</TableCell>\n                            <TableCell align=\"right\">Email</TableCell>\n                            <TableCell align=\"right\">Make</TableCell>\n                            <TableCell align=\"right\">Model</TableCell>\n                            <TableCell align=\"right\">Year</TableCell>\n                            <TableCell align=\"right\">Registration Status</TableCell>\n                            <TableCell align=\"right\">Register</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {/* maps through attendingEvent reducer to populate table body with event attendees */}\n                        {this.props.reduxState.attendingEvent.map((user) => (\n                            <TableRow key={user.user_id}>\n                                <TableCell component=\"th\" scope=\"user\">\n                                    {user.username}\n                                </TableCell>\n                                <TableCell align=\"right\">{user.email}</TableCell>\n                                <TableCell align=\"right\">{user.make}</TableCell>\n                                <TableCell align=\"right\">{user.model}</TableCell>\n                                <TableCell align=\"right\">{user.year}</TableCell>\n                                {/* Conditionally renders Complete or Pending in Registration Status dependent on value in database */}\n                                {user.registration_complete ?\n                                    <TableCell align=\"right\">\n                                        Complete\n                                </TableCell> :\n                                    <TableCell align=\"right\">\n                                        Pending\n                                </TableCell>\n                                }\n                                {/* Again checks value of registration_complete to conditionally render appropriate button */}\n                                {user.registration_complete ?\n                                    <TableCell align=\"right\">\n                                        <Button color=\"primary\" onClick={() => this.toggleRegistrationStatus(user)}>\n                                            Mark Registration Incomplete\n                                        </Button>\n                                    </TableCell> :\n                                    <TableCell align=\"right\">\n                                        <Button color=\"primary\" onClick={() => this.toggleRegistrationStatus(user)}>\n                                            Mark as Registered\n                                        </Button>\n                                    </TableCell>\n                                }\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </Paper>\n        );\n    }\n} // End MyEventsAttendingTable component\n\n// Provides component access to reduxState through props\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps)(MyEventsAttendingTable);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom'; // imports Redirect component for client routing\nimport moment from 'moment'; // imports moment.js into component to correctly format dates \n// imports Material UI components needed for styled buttons\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport MyEventsAttendingTable from '../MyEventsAttendingTable/MyEventsAttendingTable'; // component to be rendered in this component\n\n// This component renders for each object in organizerDataReducer array and displays info for each user created event\n// This component is rendered in MyEvents component\nclass MyEventsListItem extends Component {\n\n    state = {\n        toDetails: false,\n        toggleAttendees: false,\n    }\n\n    // Function that is called on Event Details button click\n    // Redirects user to /event-details page and sets current event to display correct info\n    handleDetailsButtonClick = () => {\n        this.props.dispatch({ type: 'SET_CURRENT_EVENT', payload: this.props.event });\n        this.props.dispatch({ type: 'FETCH_USER_EVENTS' });\n\n        this.setState({\n            toDetails: !this.state.toDetails,\n        });\n    } // End handleDetailsButtonClick function\n\n    // Function called on Event Attendees button click\n    // Sets the current event, dispatches to fetchRegisteredSaga.js with payload of event.id \n    // and sets state to conditionally render MyEventsAttendingTable component\n    handleEventAttendeesButtonClick = (id) => {\n        this.props.dispatch({ type: 'SET_CURRENT_EVENT', payload: this.props.event });\n        this.props.dispatch({ type: 'FETCH_REGISTERED', payload: id });\n\n        this.setState({\n            toggleAttendees: !this.state.toggleAttendees,\n        });\n    } // End handleEventAttendeesButtonClick function\n\n    render() {\n\n        if (this.state.toDetails === true) {\n            return <Redirect to='/event-details' />\n        }\n\n        return (\n            <>\n                <div>\n                    <h3>{this.props.event.event_name}</h3>\n                    <p>{moment(this.props.event.event_date_start).format('MM/DD/YYYY')}   -   {moment(this.props.event.event_date_end).format('MM/DD/YYYY')}</p>\n                    <Grid item>\n                        <ButtonGroup color=\"primary\" size=\"small\" aria-label=\"small outlined button group\">\n                            <Button onClick={this.handleDetailsButtonClick}>Event Details</Button>\n                            <Button onClick={() => this.handleEventAttendeesButtonClick(this.props.event.id)}>Event Attendees</Button>\n                        </ButtonGroup>\n                    </Grid>\n                </div>\n                <div>\n                    {/* conditionally renders MyEventsAttendingTable component */}\n                    {this.state.toggleAttendees &&\n                        <MyEventsAttendingTable />\n                    }\n                </div>\n            </>\n        );\n    }\n} // End MyEventsListItem component\n\n// Provides component with access to reduxState through props\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps)(MyEventsListItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MyEventsListItem from '../MyEventsListItem/MyEventsListItem';\nimport Box from '@material-ui/core/Box'; // Used for spacing, gives all elements nested inside a small margin\n\n// This component is responsible for displaying list of events created by user, and all users attending those events\n// Component that is rendered at /my-events\nclass MyEvents extends Component {\n\n    // Function that dispatches to organizerDataSaga.js to fetch all events created by user\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_MY_CREATED_EVENTS' });\n    } // End componentDidMount function\n\n    render() {\n        return (\n            <Box m={5}>\n            <div className=\"EventDetails\">\n                <h1>\n                    My Events:\n                </h1>\n                {/* maps through organizerDataReducer and sends each object in array to child MyEventsListItem component through props */}\n                {this.props.reduxState.organizerDataReducer.map((event) => {\n                    return(\n                    <MyEventsListItem key={event.id} event={event} />\n                    );\n                })\n                }\n            </div>\n            </Box>\n        );\n    }\n} // End MyEvents component\n\n// Provides MyEvents component with access to reduxState through props\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps)(MyEvents);","import React from 'react';\nimport { connect } from 'react-redux';\n\n// This function component is a logout button that is rendered in the Nav component\nconst LogOutButton = props => (\n  <button\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\nexport default connect()(LogOutButton); // connect method gives component dispatch method to update reduxState through sagas\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\n// imports Material UI components needed for styled nav bar\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n// imports Material UI components needed for font and spacing\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n// import './Nav.css'; Due to using Material UI for styling Nav.css is not currently included in application\n\n// This component is rendered in parent App component to be available on every page\n// Provides tabs that a user can interact with to navigate through the application\nclass Nav extends Component {\n\n  // this.state.value is needed by Material UI nav bar to show selector beneath currently selected tab/page\n  state = {\n    value: 0,\n  };\n\n  // Function that sets local state to currently selected tab, called onClick of a tab\n  handleChange = (event, newValue) => {\n    this.setState({\n      value: newValue,\n    });\n  } // End handleChange function\n\n  // Material UI component for styled nav bar\n  TabPanel = (props) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <Typography\n        component=\"div\"\n        role=\"tabpanel\"\n        hidden={this.value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        <Box p={6}>{children}</Box>\n      </Typography>\n    );\n  } // End TabPanel function\n\n  // Another component imported from Material UI for styled nav bar\n  a11yProps = (index) => {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  } // End a11yProps function\n\n  // Sets basic style with makeStyles Material UI method needed for styled nav bar\n  useStyles = () => {\n    makeStyles(theme => ({\n      root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n      },\n    }));\n  } // End useStyles function\n\n  render() {\n    return (\n\n      <div className={this.useStyles.root}>\n        <AppBar position=\"static\">\n          <Tabs value={this.state.value} onChange={this.handleChange} aria-label=\"simple tabs example\">\n\n            <Tab key={this.a11yProps(0).id} label=\"Speed Freaks\" component={Link} to=\"/tracks\" />\n            {this.props.user.id ?\n              <Tab key={this.a11yProps(1).id} label=\"Home\" component={Link} to=\"/tracks\" /> :\n              <Tab key={this.a11yProps(1).id} label=\"Login / Register\" component={Link} to=\"/tracks\" />\n            }\n            {this.props.user.id && (\n              [\n                <Tab key={this.a11yProps(2).id} label=\"Profile\" component={Link} to=\"/profile\" />,\n                <Tab key={this.a11yProps(3).id} label=\"Upcoming Events\" component={Link} to=\"/upcoming-events\" />\n              ]\n            )}\n            {this.props.user.is_admin && (\n              [\n                <Tab key={this.a11yProps(4).id} label=\"Create Event\" component={Link} to=\"/create-event\" />,\n                <Tab key={this.a11yProps(5).id} label=\"My Events\" component={Link} to=\"/my-events\" />\n              ]\n            )}\n            {this.props.user.id &&\n              <Tab key={this.a11yProps(6).id} label=\"Log Out\" component={LogOutButton} />\n            }\n          </Tabs>\n        </AppBar>\n      </div >\n    )\n  }\n} // End Nav component\n\n// Provides component with access to reduxState.user through props\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React, { Component } from 'react'; // Brings React and Component into component\n\n// Needed for client side routing\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport { connect } from 'react-redux'; // Provides dispatch method for accessing Sagas or Reducers\n\n// Custom Router's that handle whether a user sees Log In page or a page in the app\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\nimport AdminProtectedRoute from '../AdminProtectedRoute/AdminProtectedRoute';\n\n// Bring in Material UI default font\nimport 'typeface-roboto';\n\n// Components to be used\nimport './App.css';\nimport UpcomingEvents from '../UpcomingEvents/UpcomingEvents';\nimport Tracks from '../Tracks/Tracks';\nimport CreateEvent from '../CreateEvent/CreateEvent';\nimport EventDetails from '../EventDetails/EventDetails';\nimport Profile from '../Profile/Profile';\nimport MyEvents from '../MyEvents/MyEvents';\nimport Nav from '../Nav/Nav';\n\n//Material UI components\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport blue from '@material-ui/core/colors/blue';\nimport red from '@material-ui/core/colors/red';\n\n// Sets up Material UI theme for the whole app\nconst theme = createMuiTheme({\n  palette: {\n    primary: deepOrange,\n    secondary: blue,\n    error: red,\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  }\n});\n\n// Base or root component to be rendered from ../../index.js\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_USER' })\n  }\n\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}> {/* Material UI wrapper that makes Material UI theme available to all child components */}\n        <Router>\n          <div>\n            <Nav />\n            <Switch>\n              {/* Visiting localhost:3000 will redirect to localhost:3000/tracks */}\n              <Redirect exact from=\"/\" to=\"/tracks\" />\n\n              {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/tracks will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/tracks */}\n              <ProtectedRoute\n                exact\n                path=\"/tracks\"\n                component={Tracks}\n              />\n\n              <ProtectedRoute\n                exact\n                path=\"/upcoming-events\"\n                component={UpcomingEvents}\n              />\n\n              <ProtectedRoute\n                exact\n                path=\"/event-details\"\n                component={EventDetails}\n              />\n\n              <ProtectedRoute\n                exact\n                path=\"/profile\"\n                component={Profile}\n              />\n\n              {/* This works the same as the other protected route, except that if the user is not an admin,\n               they will see OnlyAdminWarning component instead */}\n              <AdminProtectedRoute\n                exact\n                path=\"/create-event\"\n                component={CreateEvent}\n              />\n\n              <AdminProtectedRoute\n                exact\n                path=\"/my-events\"\n                component={MyEvents}\n              />\n\n              {/* If none of the other routes matched, we will show a 404. */}\n              <Route render={() => <h1>404</h1>} />\n            </Switch>\n          </div>\n        </Router>\n      </MuiThemeProvider>\n    )\n  }\n} // End App component\n\nexport default connect()(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'; // imports redux to create redux store\nimport { Provider } from 'react-redux'; // Wrapper around App component to give all child components access to redux store\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger'; // Saga middleware that logs redux state updates to console\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App'; // Root component to render\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// logger will only be added to project if in development mode to avoid large amount of console.log's in production code\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}